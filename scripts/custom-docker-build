#!/bin/bash

###
# HOW THIS WORK
#
# 1. TRY TO PULL DOCKER IMAGES FROM GITLAB; IF exist THEN QUIT
# 2. WRITE DOCKERFILE
# 3. BUILD AND PUSH
#
# If you want to rebuild, delete images on gitlab
#
###

. "$CI_PROJECT_DIR/scripts/utils"

set -e
IFS=$'\n\t'

function parse_arguments() {
  read base
  read base_version
  printf -- "-f $Dockerfile " "$base"

  ARGS=(-e "s;%$base%;$base_version;g")
  while read image; do
    read version
    ARGS+=(-e "s;%$image%;$version;g")
  done

  while IFS='' read -r line || [[ -n "$line" ]]; do
    echo $line | sed ${ARGS[@]} >> $Dockerfile
  done < $CI_PROJECT_DIR/Dockerfile.template
}

function generate_command() {
  buildimage_name=$1; shift;

  printf -- "docker build "
  echo $buildimage_name | tr '-' '\n' | parse_arguments

  for i in "$@"
  do
    printf -- "%s " "$i"
  done
  printf -- ".\\n"
}

exitCode=$($CI_PROJECT_DIR/scripts/pull-docker-image $3 | tail -n 1)

if [ $exitCode -eq "0" ]; then
  echo "FOUND $3"; exit 0;
fi

Dockerfile="$CI_PROJECT_DIR/Dockerfile"

# Empty file
if fileExists $Dockerfile; then
  cp /dev/null $Dockerfile
fi

docker_command=$(generate_command $@)
echo "$3: executing $docker_command"

cat $Dockerfile

# eval $docker_command
# docker push $3
